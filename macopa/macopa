#!/usr/bin/env bash

# macopa
#
# text expansion tool to copy and paste using abbreviations
#
# <3 cscs <3

# Version: 0.2
# Release: January 11, 2025

_macopa_help() {
    cat << EOF

macopa
Syntax: macopa [-F,-T,-S][-y,-w,-r,-d][-y.-w,-k][-z,-y,-q,-k,-d]

Input Mode [-F,-T,-S]
F     Full or regular mode inserts string as block
T     Typing mode inserts by simulating each key press
S     Slow typing mode simulates longer delays between keys

Backend [-y,-w,-r,-d]
y     Use ydotool
w     Use wtype
r     Use wlrctl*   *single-speed typing mode only
d     Use dotool

Clipboard [-y,-w,-k]
y     Use wayclip
w     Use wl-clipboard
k     Use klipper

Dialog [-z,-y,-q,-k,-d]
z     Use zenity
y     Use yad
q     Use qarma
k     Use kdialog
d     Use dialog*  *terminal-only and unrecommended

Example use (1): macopa -Fywk
Example use (2): macopa -T -w -y -z

EOF
}

# Store base directory path, expand complete path using HOME environment variable
_macopa_base_dir=$(realpath "${HOME}/.config/macopa")

# Find regular files in base_dir, pipe output to sed
_macopa_abbrvs=$(find "${_macopa_base_dir}" -type f \( ! -iname ".*" \) | sort | sed "s?^${_macopa_base_dir}/??g")

# First option - backends and daemons
while getopts "hTSF" opt; do
    case ${opt} in
        h)  # Helpy help help
            _macopa_help
            exit ;;
        T)  # Set Insert method to "Typing"
            _macopa_typing=1
            break ;;
        S)  # Set Insert method to "Slow Typing"
            _macopa_typing=2
            break ;;
        F)  # Set Insert method to "Full"
            unset _macopa_typing
            break ;;
        \?) # Error
            _macopa_help
            exit 1 ;;
    esac
    shift "$((OPTIND-1))"
done

# Second option - backends and daemons
while getopts "ywrd" opt; do
    case ${opt} in
        y)  # Use ydotool
            if ! pgrep -f ydotoold &> /dev/null 2>&1; then
                ydotoold -m > /dev/null 2>&1 &
                _macopa_daemonpid="$!"
            fi
            if [ "${_macopa_typing}" == "1" ]; then
                _macopa_insert() {
                    _macopa_clip_paste | ydotool type -d 1 --file -
                }
            elif [ "${_macopa_typing}" == "2" ]; then
                _macopa_insert() {
                    _macopa_clip_paste | ydotool type -d 15 --file -
                }
            else
                _macopa_insert() {
                    ydotool key -d 1 42:1 110:1 110:0 42:0
                }
            fi
            break ;;
        w)  # Use wtype
            if [ "${_macopa_typing}" == "1" ]; then
                _macopa_insert() {
                    _macopa_clip_paste | wtype -d 1 -
                }
            elif [ "${_macopa_typing}" == "2" ]; then
                _macopa_insert() {
                    _macopa_clip_paste | wtype -d 15 -
                }
            else
                _macopa_insert() {
                    wtype -M Shift -P Insert -p Insert -m Shift
                }
            fi
            break ;;
        r)  # Use wlrctl
            _macopa_insert() {
                wlrctl keyboard type "$(_macopa_clip_paste)"
            }
            break ;;
        d)  # Use dotool
            if ! pgrep -f dotoold &> /dev/null 2>&1; then
                dotoold > /dev/null 2>&1 &
                _macopa_daemonpid="$!"
            fi
            if [ "${_macopa_typing}" == "1" ]; then
                _macopa_insert() {
                    printf %s\\n 'keydelay 1' 'keyhold 1' 'typedelay 1' 'typehold 1' "type $(_macopa_clip_paste)" | dotool
                }
            elif [ "${_macopa_typing}" == "2" ]; then
                _macopa_insert() {
                    printf %s\\n 'keydelay 15' 'keyhold 15' 'typedelay 15' 'typehold 15' "type $(_macopa_clip_paste)" | dotool
                }
            else
                _macopa_insert() {
                    printf %s\\n 'keydelay 1' 'keyhold 1' 'typedelay 1' 'typehold 1' 'key shift+k:110' | dotoolc
                }
            fi
            break ;;
        \?) # Error
            _macopa_help
            exit 1 ;;
    esac
    shift "$((OPTIND-1))"
done

# Third option - clipboard
while getopts "wyk" opt; do
    case "${opt}" in
        w)  # Use wl-clipboard
            _macopa_clip_paste() {
                wl-paste -n
            }
            _macopa_abbrvs_paste() {
                _macopa_abbrvs_expreg | wl-copy
            }
            _macopa_abbrvs_paste_p() {
                _macopa_abbrvs_expreg | wl-copy -p
            }
            _macopa_abbrvs_sh_paste() {
                _macopa_abbrvs_expsh | wl-copy
            }
            _macopa_abbrvs_sh_paste_p() {
                _macopa_abbrvs_expsh | wl-copy -p
            }
            _macopa_clip_copy_orig() {
                echo -n "$_macopa_clipboard" | wl-copy
            }
            break ;;
        y)  # Use wayclip
            _macopa_clip_paste() {
                waypaste
            }
            _macopa_abbrvs_paste() {
                _macopa_abbrvs_expreg | waycopy
            }
            _macopa_abbrvs_paste_p() {
                _macopa_abbrvs_expreg | waycopy -p
            }
            _macopa_abbrvs_sh_paste() {
                _macopa_abbrvs_expsh | waycopy
            }
            _macopa_abbrvs_sh_paste_p() {
                _macopa_abbrvs_expsh | waycopy -p
            }
            _macopa_clip_copy_orig() {
                echo -n "$_macopa_clipboard" | waycopy
            }
            break ;;
        k)  # Use klipper/dbus
            _macopa_clip_paste() {
                qdbus6 org.kde.klipper /klipper getClipboardContents
            }
            _macopa_abbrvs_paste() {
                qdbus6 org.kde.klipper /klipper org.kde.klipper.klipper.setClipboardContents "$(_macopa_abbrvs_expreg)"
            }
            _macopa_abbrvs_paste_p() {
                # There is no primary for klipper?
                :
            }
            _macopa_abbrvs_sh_paste() {
                qdbus6 org.kde.klipper /klipper org.kde.klipper.klipper.setClipboardContents "$(_macopa_abbrvs_expsh)"
            }
            _macopa_abbrvs_sh_paste_p() {
                # There is no primary for klipper?
                :
            }
            _macopa_clip_copy_orig() {
                qdbus6 org.kde.klipper /klipper org.kde.klipper.klipper.setClipboardContents "$(echo -n "$_macopa_clipboard")"
            }
            break ;;
        \?) # Error
            _macopa_help
            exit 1 ;;
    esac
    shift "$((OPTIND-1))"
done

# Fourth option - Dialog GUI
while getopts "zyqkd" opt; do
    case "${opt}" in
        z)  # Use zenity
            _macopa_dia_main() {
                # 'Echo'ing options instead of passing them directly to zenity allows names like '+1' or '-1'
                echo "${_macopa_abbrvs}" | tr ' ' '\n' | zenity --list --title=macopa --text " Select or search by typing " --width="$_macopa_geo_w" --height="$_macopa_geo_h" --column="Sort"
            }
            _macopa_dia_nodir() {
                zenity --error --text="Abbreviation directory not found.\nIt has been created at\n${HOME}/.config/macopa\nStart by adding text or script files.\n"
            }
            _macopa_dia_abrverror() {
                zenity --error --text="Abbreviation not found:\n${_macopa_name}"
            }
            break ;;
        y)  # Use yad
            _macopa_dia_main() {
                # 'Echo'ing options instead of passing them directly to yad allows names like '+1' or '-1'
                echo "${_macopa_abbrvs}" | tr ' ' '\n' | yad --list --title=macopa --search-column=1 --text " Select or search by typing " --geometry="$_macopa_geo_w"x"$_macopa_geo_h" --column=Sort:TEXT --separator=''
            }
            _macopa_dia_nodir() {
                yad --button="OK" --text="Abbreviation directory not found.\nIt has been created at\n${HOME}/.config/macopa\nStart by adding text or script files.\n"
            }
            _macopa_dia_abrverror() {
                yad --button="OK" --text="Abbreviation not found:\n${_macopa_name}"
            }
            break ;;
        q)  # Use qarma
            _macopa_dia_main() {
                # 'Echo'ing options instead of passing them directly to qarma allows names like '+1' or '-1'
                echo "${_macopa_abbrvs}" | tr ' ' '\n' | qarma --list --title=macopa --text " Select or search by typing " --width="$_macopa_geo_w" --height="$_macopa_geo_h" --column="Sort"
            }
            _macopa_dia_nodir() {
                qarma --error --text="Abbreviation directory not found.<br>It has been created at<br>${HOME}/.config/macopa<br>Start by adding text or script files.<br>"
            }
            _macopa_dia_abrverror() {
                qarma --error --text="Abbreviation not found:<br>${_macopa_name}"
            }
            break ;;
        k)  # Use kdialog
            # kdialog requires 'tag item [tag item]' so we duplicate the entries with extra sed
            _macopa_abbrvs=$(find "${_macopa_base_dir}" -type f \( ! -iname ".*" \) | sort | sed -e "s?^${_macopa_base_dir}/??g" -e 's \(.*\) \1\ \1 ')
            _macopa_dia_main() {
                # We wish we could quote the variable here but it breaks the parsing
                kdialog --title "macopa" --geometry "$_macopa_geo_w"x"$_macopa_geo_h" --menu "Select or search by typing" ${_macopa_abbrvs}
            }
            _macopa_dia_nodir() {
                kdialog --sorry "Abbreviation directory not found.\nIt has been created at\n${HOME}/.config/macopa\nStart by adding text or script files.\n"
            }
            _macopa_dia_abrverror() {
                kdialog --sorry "Abbreviation not found:\n${_macopa_name}"
            }
            break ;;
        d)  # Use dialog
            # dialog requires 'tag item [tag item]' so we duplicate the entries with extra sed
            _macopa_abbrvs=$(find "${_macopa_base_dir}" -type f \( ! -iname ".*" \) | sort | sed -e "s?^${_macopa_base_dir}/??g" -e 's \(.*\) \1\ \1 ')
            export _macopa_abbrvs
            # There is no unified way to check for default terminal so loop over a list of them
            for terminal in "$TERMINAL" x-terminal-emulator konsole kitty foot gnome-terminal mate-terminal guake alacritty terminology wayst terminator xfce4-terminal urxvt rxvt termit Eterm aterm uxterm xterm roxterm termite lxterminal st qterminal lilyterm tilix terminix tilda hyper wezterm rio; do
                if command -v "$terminal" > /dev/null 2>&1; then
                    export TERMINAL="$terminal"
                    break
                fi
            done
            # Open a terminal and send the selection to tmp file
            ${TERMINAL:-xterm} -e ${SHELL:-bash} -c 'dialog --title "macopa" --notags --no-shadow --menu "Select or search by typing" 25 25 5 ${_macopa_abbrvs} --output-fd 1 > /tmp/macopa ; exit'
            # Read tmp file contents to carry selection
            _macopa_dia_main() {
                cat /tmp/macopa
            }
            _macopa_dia_nodir() {
                dialog --no-shadow --msgbox "Abbreviation directory not found.\nIt has been created at\n${HOME}/.config/macopa\nStart by adding text or script files.\n"
            }
            _macopa_dia_abrverror() {
                dialog --no-shadow --msgbox "Abbreviation not found:\n${_macopa_name}"
            }
            break ;;
        \?) # Error
            _macopa_help
            exit 1 ;;
    esac
    shift "$((OPTIND-1))"
done

# Check for config dir
if [ ! -d "${HOME}/.config/macopa" ]; then
    mkdir "${HOME}/.config/macopa"
    _macopa_dia_nodir
fi

# Some math for the dialog geometry
_macopa_geo_w=$(( $(echo "$_macopa_abbrvs" | wc -L) * 5 + 25 ))
if [ $_macopa_geo_w -lt 200 ]; then
    _macopa_geo_w=200
elif [ $_macopa_geo_w -gt 600 ]; then
    _macopa_geo_w=600
fi
_macopa_geo_h=$(( $(echo "$_macopa_abbrvs" | wc -l) * 30 + 50 ))
if [ $_macopa_geo_h -lt 200 ]; then
    _macopa_geo_h=200
elif [ $_macopa_geo_h -gt 600 ]; then
    _macopa_geo_h=600
fi

# The selection made by dialog
_macopa_name=$(_macopa_dia_main)
_macopa_path="${_macopa_base_dir}/${_macopa_name}"

_macopa_abbrvs_expreg() {
    echo -n "$(cat "$_macopa_path")"
}
_macopa_abbrvs_expsh() {
    echo -n "$(eval "$(cat "$_macopa_path")")"
}

if [ -f "${_macopa_base_dir}/${_macopa_name}" ]; then
    if [ -e "$_macopa_path" ]; then
        # Preserve the current value of the clipboard
        _macopa_clipboard=$(_macopa_clip_paste)
        # Parse content of *.sh files, read regulars
        if [ "${_macopa_path: -3}" == ".sh" ]; then
            # Put text in primary buffer for Shift+Insert pasting
            _macopa_abbrvs_sh_paste_p
            # Put text in clipboard selection for apps like Firefox that insist on using the clipboard for all pasting
            _macopa_abbrvs_sh_paste
        else
            # Put text in primary buffer for Shift+Insert pasting
            _macopa_abbrvs_paste_p
            # Put text in clipboard selection for apps like Firefox that insist on using the clipboard for all pasting
            _macopa_abbrvs_paste
        fi
        # Do the paste at cursor using Shift+Insert
        sleep 0.001
        _macopa_insert
        # Restore the original value of the clipboard
        sleep 0.001
        _macopa_clip_copy_orig
    else
        _macopa_dia_abrverror
    fi
fi

# If we started it, kill the daemon
if [ -v _macopa_daemonpid ]; then
    kill -15 "$_macopa_daemonpid"
fi

exit 0

